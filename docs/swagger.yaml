definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  middleware.JWT:
    properties:
      token:
        type: string
    type: object
  middleware.LoginField:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      fullname:
        type: string
      id:
        type: integer
      password:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns an authentication token
      operationId: loginUser
      parameters:
      - description: User credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/middleware.LoginField'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/middleware.JWT'
      summary: Login user
      tags:
      - Auth
  /api/logout:
    delete:
      consumes:
      - application/json
      description: Session Logout
      operationId: logoutUser
      parameters:
      - description: User credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/middleware.JWT'
      produces:
      - application/json
      responses: {}
      summary: Logout user
      tags:
      - Auth
  /api/users:
    get:
      consumes:
      - application/json
      description: Get details of all users
      operationId: get-all-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create New User
      operationId: create
      parameters:
      - description: User credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      summary: Create User
      tags:
      - Users
  /api/users/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      operationId: delete-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil Menghapus Data
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Gagal menghapus data pengguna
          schema:
            additionalProperties: true
            type: object
      summary: Delete user by ID
      tags:
      - Users
  /api/users/get/{id}:
    get:
      consumes:
      - application/json
      description: Get a user by ID
      operationId: get-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            additionalProperties: true
            type: object
      summary: Get user by ID
      tags:
      - Users
  /api/users/update/{id}:
    post:
      consumes:
      - application/json
      description: Update a user by ID
      operationId: update-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil melakukan pembaruan
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Gagal melakukan pembaruan
          schema:
            additionalProperties: true
            type: object
      summary: Update user by ID
      tags:
      - Users
swagger: "2.0"
