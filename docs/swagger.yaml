definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  middleware.JWT:
    properties:
      token:
        type: string
    type: object
  middleware.LoginField:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.Permission:
    properties:
      action:
        type: string
      code:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      guard_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      module:
        type: string
      name:
        type: string
      tag:
        type: string
      updatedAt:
        type: string
    type: object
  models.PermissionRole:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      permission_code:
        type: string
      role_code:
        type: string
      updatedAt:
        type: string
    type: object
  models.Role:
    properties:
      code:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      guard:
        type: string
      id:
        type: integer
      name:
        type: string
      tag:
        type: string
      updatedAt:
        type: string
    type: object
  models.Tbl_club:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      hometown:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.Tbl_match:
    properties:
      club_id1:
        type: integer
      club_id2:
        type: integer
      createdAt:
        type: string
      date_match:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      level:
        type: integer
      turnament_code:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Tbl_player:
    properties:
      club_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      is_active:
        type: boolean
      name:
        type: string
      position:
        type: string
      updatedAt:
        type: string
    type: object
  models.Tbl_score:
    properties:
      club_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      match_id:
        type: integer
      score:
        type: integer
      status:
        type: string
      updatedAt:
        type: string
    type: object
  models.Turnament:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      fullname:
        type: string
      id:
        type: integer
      password:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  models.UserRole:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      role_code:
        type: string
      updatedAt:
        type: string
      user_id:
        type: integer
    required:
    - role_code
    - user_id
    type: object
info:
  contact: {}
  description: This is a sample server.
  title: GO-Scoresheet
  version: "2.0"
paths:
  /api/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns an authentication token
      operationId: loginUser
      parameters:
      - description: User credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/middleware.LoginField'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/middleware.JWT'
      summary: Login user
      tags:
      - Auth
  /api/logout:
    delete:
      consumes:
      - application/json
      description: Session Logout
      operationId: logoutUser
      produces:
      - application/json
      responses: {}
      summary: Logout user
      tags:
      - Auth
  /api/permission:
    get:
      consumes:
      - application/json
      description: Get All Permission
      operationId: GetAllPermission
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Permission'
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Get All Permission
      tags:
      - Permissions
    post:
      consumes:
      - application/json
      description: Create New Permission
      operationId: CreatePermission
      parameters:
      - description: Permissioan credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.Permission'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Permission'
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Create Permission
      tags:
      - Permissions
  /api/permission-role:
    get:
      consumes:
      - application/json
      description: Get All Permission Role
      operationId: GetAllPermissionRole
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PermissionRole'
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Get All Permission Role
      tags:
      - Permission Roles
    post:
      consumes:
      - application/json
      description: Create New Permission Role
      operationId: CreatePermissionRole
      parameters:
      - description: Permissioan Role credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.PermissionRole'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PermissionRole'
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Create Permission Role
      tags:
      - Permission Roles
  /api/permission-role/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Permission Role by ID
      operationId: DeletePermissionRoleById
      parameters:
      - description: PermissionRole ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PermissionRole'
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Delete Permission Role by ID
      tags:
      - Permission Roles
    get:
      consumes:
      - application/json
      description: Get Permission Role by ID
      operationId: GetPermissionRoleById
      parameters:
      - description: PermissionRole ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PermissionRole'
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Get Permission Role by ID
      tags:
      - Permission Roles
    post:
      consumes:
      - application/json
      description: Update Permission Role by ID
      operationId: UpdatePermissionRoleById
      parameters:
      - description: PermissionRole ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PermissionRole'
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Update Permission Role by ID
      tags:
      - Permission Roles
  /api/permission/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Permission by ID
      operationId: DeletePermissionById
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Permission'
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Delete Permission by ID
      tags:
      - Permissions
    get:
      consumes:
      - application/json
      description: Get Permission by ID
      operationId: GetPermissionById
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Permission'
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Get Permission by ID
      tags:
      - Permissions
    post:
      consumes:
      - application/json
      description: Update Permission by ID
      operationId: UpdatePermissionById
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Permission'
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Update Permission by ID
      tags:
      - Permissions
  /api/role:
    get:
      consumes:
      - application/json
      description: Get details of all roles
      operationId: get-all-Roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
      security:
      - Bearer: []
      summary: Get all Roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create New Role
      operationId: createRole
      parameters:
      - description: User credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Role'
      security:
      - Bearer: []
      summary: Create Roles
      tags:
      - Roles
  /api/role/{id}:
    get:
      consumes:
      - application/json
      description: Get a role by ID
      operationId: get-role-by-id
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role tidak ditemukan
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get role by ID
      tags:
      - Roles
  /api/roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a role by ID
      operationId: delete-role-by-id
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil Menghapus Data
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Gagal menghapus data role
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete role by ID
      tags:
      - Roles
  /api/user-role:
    get:
      consumes:
      - application/json
      description: Get details of all user roles
      operationId: get-all-UserRoles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserRole'
            type: array
      security:
      - Bearer: []
      summary: Get all User Roles
      tags:
      - User Roles
    post:
      consumes:
      - application/json
      description: Create New User Role
      operationId: createUserRole
      parameters:
      - description: User credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.UserRole'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserRole'
      security:
      - Bearer: []
      summary: Create User Roles
      tags:
      - User Roles
  /api/user-role/{id}:
    get:
      consumes:
      - application/json
      description: Get a user role by ID
      operationId: get-user-role-by-id
      parameters:
      - description: User Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User Role tidak ditemukan
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get user role by ID
      tags:
      - User Roles
  /api/userroles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user role by ID
      operationId: delete-user-role-by-id
      parameters:
      - description: User Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil Menghapus Data
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User Role tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Gagal menghapus data user role
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete user role by ID
      tags:
      - User Roles
  /api/users:
    get:
      consumes:
      - application/json
      description: Get details of all users
      operationId: get-all-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create New User
      operationId: createUser
      parameters:
      - description: User credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      summary: Create User
      tags:
      - Users
  /api/users/{id}:
    get:
      consumes:
      - application/json
      description: Get a user by ID
      operationId: get-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Get user by ID
      tags:
      - Users
  /api/users/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      operationId: delete-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil Menghapus Data
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Gagal menghapus data pengguna
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Delete user by ID
      tags:
      - Users
  /api/users/update/{id}:
    post:
      consumes:
      - application/json
      description: Update a user by ID
      operationId: update-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil melakukan pembaruan
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Gagal melakukan pembaruan
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Update user by ID
      tags:
      - Users
  /api/workflow/club:
    get:
      consumes:
      - application/json
      description: Get details of all club
      operationId: get-all-Club
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tbl_club'
            type: array
      security:
      - Bearer: []
      summary: Get all Club
      tags:
      - Club
    post:
      consumes:
      - application/json
      description: Create New Club
      operationId: createClub
      parameters:
      - description: User credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.Tbl_club'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Tbl_club'
      security:
      - Bearer: []
      summary: Create Club
      tags:
      - Club
  /api/workflow/club/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a club by ID
      operationId: delete-club-by-id
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil Menghapus Data
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Club tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Gagal menghapus data Club
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete club by ID
      tags:
      - Club
    get:
      consumes:
      - application/json
      description: Get a club by ID
      operationId: get-club-by-id
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Club tidak ditemukan
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get club by ID
      tags:
      - Club
  /api/workflow/match:
    get:
      consumes:
      - application/json
      description: Get details of all match
      operationId: get-all-Match
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tbl_match'
            type: array
      security:
      - Bearer: []
      summary: Get all Match
      tags:
      - Match
    post:
      consumes:
      - application/json
      description: Create New Match
      operationId: createMatch
      parameters:
      - description: User credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.Tbl_match'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Tbl_match'
      security:
      - Bearer: []
      summary: Create Match
      tags:
      - Match
  /api/workflow/match/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a match by ID
      operationId: delete-match-by-id
      parameters:
      - description: Match ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil Menghapus Data
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Match tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Gagal menghapus data Match
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete match by ID
      tags:
      - Match
    get:
      consumes:
      - application/json
      description: Get a match by ID
      operationId: get-match-by-id
      parameters:
      - description: Match ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Match tidak ditemukan
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get match by ID
      tags:
      - Match
  /api/workflow/player:
    get:
      consumes:
      - application/json
      description: Get details of all player
      operationId: get-all-Player
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tbl_player'
            type: array
      security:
      - Bearer: []
      summary: Get all Player
      tags:
      - Player
    post:
      consumes:
      - application/json
      description: Create New Player
      operationId: createPlayer
      parameters:
      - description: User credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.Tbl_player'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Tbl_player'
      security:
      - Bearer: []
      summary: Create Player
      tags:
      - Player
  /api/workflow/player/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a player by ID
      operationId: delete-player-by-id
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil Menghapus Data
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Player tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Gagal menghapus data Player
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete player by ID
      tags:
      - Player
    get:
      consumes:
      - application/json
      description: Get a player by ID
      operationId: get-player-by-id
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Player tidak ditemukan
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get player by ID
      tags:
      - Player
  /api/workflow/score:
    get:
      consumes:
      - application/json
      description: Get details of all score
      operationId: get-all-Score
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tbl_score'
            type: array
      security:
      - Bearer: []
      summary: Get all Score
      tags:
      - Score
    post:
      consumes:
      - application/json
      description: Create New Score
      operationId: createScore
      parameters:
      - description: User credentials in JSON format
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.Tbl_score'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Tbl_score'
      security:
      - Bearer: []
      summary: Create Score
      tags:
      - Score
  /api/workflow/score/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a score by ID
      operationId: delete-score-by-id
      parameters:
      - description: Score ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil Menghapus Data
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Score tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Gagal menghapus data Score
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete score by ID
      tags:
      - Score
    get:
      consumes:
      - application/json
      description: Get a score by ID
      operationId: get-score-by-id
      parameters:
      - description: Score ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Score tidak ditemukan
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get score by ID
      tags:
      - Score
  /api/workflow/turnament:
    get:
      consumes:
      - application/json
      description: Get details of all turnament
      operationId: get-all-Turnament
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Turnament'
            type: array
      security:
      - Bearer: []
      summary: Get all Turnament
      tags:
      - Turnament
  /api/workflow/turnament/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a turnament by ID
      operationId: delete-turnament-by-id
      parameters:
      - description: Turnament ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil Menghapus Data
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Turnament tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Gagal menghapus data Turnament
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete turnament by ID
      tags:
      - Turnament
    get:
      consumes:
      - application/json
      description: Get a turnament by ID
      operationId: get-turnament-by-id
      parameters:
      - description: Turnament ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Turnament tidak ditemukan
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get turnament by ID
      tags:
      - Turnament
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
